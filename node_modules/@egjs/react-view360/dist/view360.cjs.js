/*
Copyright (c) 2017-present NAVER Corp.
name: @egjs/react-view360
license: MIT
author: NAVER Corp.
repository: https://github.com/naver/egjs-view360/tree/master/packages/react-view360
version: 3.0.4
*/
'use strict';

var React = require('react');
var view360 = require('@egjs/view360');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

var PANOVIEWER_DEFAULT_PROPS = {
  tag: "div",
  onReady: function () {},
  onViewChange: function () {},
  onAnimationEnd: function () {},
  onError: function () {}
};

var PanoViewer = function (_super) {
  __extends(PanoViewer, _super);

  function PanoViewer(props) {
    var _this = _super.call(this, props) || this;

    _this._canvasKey = -1;
    return _this;
  }

  var __proto = PanoViewer.prototype;
  Object.defineProperty(__proto, "element", {
    get: function () {
      return this._containerEl;
    },
    enumerable: false,
    configurable: true
  });

  __proto.componentDidMount = function () {
    var props = __assign({}, this.props);

    this._vanillaPanoViewer = new view360.PanoViewer(this._containerEl, props);
    this._prevProps = props;

    this._bindEvents();
  };

  __proto.componentWillUnmount = function () {
    this._vanillaPanoViewer.destroy();
  };

  __proto.componentWillUpdate = function (nextProps) {
    var props = this.props;

    if (nextProps.image != null && nextProps.image !== props.image || nextProps.video != null && nextProps.video !== props.video) {
      // Re-generate canvas
      this._canvasKey = this._generateCanvasKey();
    }
  };

  __proto.componentDidUpdate = function () {
    var props = this.props;
    var lastProps = this._prevProps;
    var panoViewer = this._vanillaPanoViewer;
    view360.updatePanoViewer(panoViewer, props, lastProps);
    this._prevProps = __assign({}, props);
  };

  __proto.render = function () {
    var _this = this;

    var _a;

    var props = this.props;
    var Container = props.tag;
    var canvasClass = (_a = props.canvasClass) !== null && _a !== void 0 ? _a : view360.DEFAULT_CANVAS_CLASS;
    var attributes = {};

    for (var name in props) {
      if (!(name in PANOVIEWER_DEFAULT_PROPS) && !(name in view360.PANOVIEWER_OPTIONS)) {
        attributes[name] = props[name];
      }
    }

    return React.createElement(Container, __assign({}, attributes, {
      ref: function (e) {
        e && (_this._containerEl = e);
      }
    }), React.createElement("canvas", {
      className: canvasClass,
      key: this._canvasKey
    }), this.props.children);
  };

  __proto._bindEvents = function () {
    var _this = this;

    var panoViewer = this._vanillaPanoViewer;
    var props = this.props;
    Object.keys(view360.PANOVIEWER_EVENTS).forEach(function (eventKey) {
      var eventName = view360.PANOVIEWER_EVENTS[eventKey];
      var propName = "on" + (eventName.charAt(0).toUpperCase() + eventName.slice(1));
      panoViewer.on(eventName, function (e) {
        e.currentTarget = _this;
        props[propName](e);
      });
    });
  };

  __proto._generateCanvasKey = function () {
    var newKey;
    var oldKey = this._canvasKey;

    do {
      var array = new Uint32Array(1);
      crypto.getRandomValues(array);
      newKey = array[0];
    } while (newKey === oldKey);

    return newKey;
  };

  PanoViewer.defaultProps = PANOVIEWER_DEFAULT_PROPS;

  __decorate([view360.withPanoViewerMethods], PanoViewer.prototype, "_vanillaPanoViewer", void 0);

  return PanoViewer;
}(React.PureComponent);

/*
 * Copyright (c) 2017 NAVER Corp.
 * egjs projects are licensed under the MIT license
 */
var View360 = {
  PanoViewer: PanoViewer,
  SpinViewer: PanoViewer
};

module.exports = View360;
//# sourceMappingURL=view360.cjs.js.map
